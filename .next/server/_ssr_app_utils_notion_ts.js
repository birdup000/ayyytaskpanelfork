"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_app_utils_notion_ts";
exports.ids = ["_ssr_app_utils_notion_ts"];
exports.modules = {

/***/ "(ssr)/./app/utils/notion.ts":
/*!*****************************!*\
  !*** ./app/utils/notion.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteNoteFromNotion: () => (/* binding */ deleteNoteFromNotion),\n/* harmony export */   findNotionPageId: () => (/* binding */ findNotionPageId),\n/* harmony export */   syncNoteWithNotion: () => (/* binding */ syncNoteWithNotion),\n/* harmony export */   syncNotesFromNotion: () => (/* binding */ syncNotesFromNotion)\n/* harmony export */ });\nconst deleteNoteFromNotion = async (noteId, { apiKey, clientSecret, refreshToken })=>{\n    // TODO: Replace with actual Notion API implementation\n    if (!apiKey || !clientSecret || !refreshToken) {\n        throw new Error('Notion API key, client secret, or refresh token not configured');\n    }\n    const NOTION_DATABASE_ID = process.env.NEXT_PUBLIC_NOTION_DATABASE_ID;\n    if (!NOTION_DATABASE_ID) {\n        throw new Error('Notion database ID not configured');\n    }\n    try {\n        // First, find the Notion page ID for this note\n        const searchResponse = await fetch(`https://api.notion.com/v1/databases/${NOTION_DATABASE_ID}/query`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n                'Notion-Version': '2022-06-28',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                filter: {\n                    property: 'note_id',\n                    rich_text: {\n                        equals: noteId\n                    }\n                }\n            })\n        });\n        if (!searchResponse.ok) {\n            throw new Error(`Failed to find note in Notion: ${searchResponse.statusText}`);\n        }\n        const searchData = await searchResponse.json();\n        if (searchData.results.length > 0) {\n            const notionPageId = searchData.results[0].id;\n            // Delete the page\n            const deleteResponse = await fetch(`https://api.notion.com/v1/pages/${notionPageId}`, {\n                method: 'DELETE',\n                headers: {\n                    'Authorization': `Bearer ${apiKey}`,\n                    'Notion-Version': '2022-06-28'\n                }\n            });\n            if (!deleteResponse.ok) {\n                throw new Error(`Failed to delete note from Notion: ${deleteResponse.statusText}`);\n            }\n        }\n    } catch (error) {\n        console.error('Error deleting from Notion:', error);\n        throw error;\n    }\n};\nconst findNotionPageId = async (noteId)=>{\n    const NOTION_API_KEY = process.env.NEXT_PUBLIC_NOTION_API_KEY;\n    const NOTION_DATABASE_ID = process.env.NEXT_PUBLIC_NOTION_DATABASE_ID;\n    if (!NOTION_API_KEY || !NOTION_DATABASE_ID) {\n        throw new Error('Notion API key or database ID not configured');\n    }\n    const searchResponse = await fetch(`https://api.notion.com/v1/databases/${NOTION_DATABASE_ID}/query`, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${NOTION_API_KEY}`,\n            'Notion-Version': '2022-06-28',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            filter: {\n                property: 'note_id',\n                rich_text: {\n                    equals: noteId\n                }\n            }\n        })\n    });\n    if (!searchResponse.ok) {\n        throw new Error(`Failed to find note in Notion: ${searchResponse.statusText}`);\n    }\n    const searchData = await searchResponse.json();\n    return searchData.results[0]?.id;\n};\nconst syncNotesFromNotion = async ({ apiKey, clientSecret, refreshToken })=>{\n    if (!apiKey || !clientSecret || !refreshToken) {\n        throw new Error('Notion API key, client secret, or refresh token not configured');\n    }\n    const NOTION_DATABASE_ID = process.env.NEXT_PUBLIC_NOTION_DATABASE_ID;\n    if (!NOTION_DATABASE_ID) {\n        throw new Error('Notion database ID not configured');\n    }\n    const response = await fetch(`https://api.notion.com/v1/databases/${NOTION_DATABASE_ID}/query`, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Notion-Version': '2022-06-28',\n            'Content-Type': 'application/json'\n        }\n    });\n    if (!response.ok) {\n        throw new Error(`Failed to fetch notes from Notion: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data.results.map((page)=>({\n            id: page.properties.note_id.rich_text[0]?.plain_text || crypto.randomUUID(),\n            title: page.properties.title.title[0]?.plain_text || 'Untitled Note',\n            content: page.properties.content.rich_text.map((text)=>text.plain_text).join('\\n') || '',\n            tags: page.properties.tags.multi_select.map((tag)=>tag.name) || [],\n            createdAt: new Date(page.created_time),\n            updatedAt: new Date(page.last_edited_time)\n        }));\n};\nconst syncNoteWithNotion = async (note, { apiKey, clientSecret, refreshToken })=>{\n    // TODO: Replace with actual Notion API implementation\n    if (!apiKey || !clientSecret || !refreshToken) {\n        throw new Error('Notion API key, client secret, or refresh token not configured');\n    }\n    const NOTION_DATABASE_ID = process.env.NEXT_PUBLIC_NOTION_DATABASE_ID;\n    if (!NOTION_DATABASE_ID) {\n        throw new Error('Notion database ID not configured');\n    }\n    try {\n        // Check if note already exists in Notion\n        const existingPageId = await findNotionPageId(note.id);\n        const endpoint = existingPageId ? `https://api.notion.com/v1/pages/${existingPageId}` : `https://api.notion.com/v1/pages`;\n        const response = await fetch(endpoint, {\n            method: existingPageId ? 'PATCH' : 'POST',\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n                'Notion-Version': '2022-06-28',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                parent: {\n                    database_id: NOTION_DATABASE_ID\n                },\n                properties: {\n                    note_id: {\n                        rich_text: [\n                            {\n                                text: {\n                                    content: note.id\n                                }\n                            }\n                        ]\n                    },\n                    title: {\n                        title: [\n                            {\n                                text: {\n                                    content: note.title\n                                }\n                            }\n                        ]\n                    },\n                    content: {\n                        rich_text: note.content.split('\\n').map((line)=>({\n                                text: {\n                                    content: line\n                                }\n                            }))\n                    },\n                    tags: {\n                        multi_select: note.tags.map((tag)=>({\n                                name: tag\n                            }))\n                    }\n                }\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to sync with Notion: ${response.statusText}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Error syncing with Notion:', error);\n        throw error;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./app/utils/notion.ts\n");

/***/ })

};
;