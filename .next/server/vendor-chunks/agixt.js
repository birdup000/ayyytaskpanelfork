"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/agixt";
exports.ids = ["vendor-chunks/agixt"];
exports.modules = {

/***/ "(ssr)/./node_modules/agixt/dist/index.js":
/*!******************************************!*\
  !*** ./node_modules/agixt/dist/index.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\"));\nvar AGiXTSDK = /** @class */ (function () {\n    function AGiXTSDK(config) {\n        this.baseUri = config.baseUri || 'http://localhost:7437';\n        if (config.apiKey) {\n            if (config.apiKey.includes('Bearer ')) {\n                config.apiKey = config.apiKey.replace('Bearer ', '');\n            }\n            this.headers = {\n                Authorization: \"Bearer \".concat(config.apiKey),\n                'Content-Type': 'application/json',\n            };\n        }\n        else {\n            this.headers = {\n                'Content-Type': 'application/json',\n            };\n        }\n        if (this.baseUri.slice(-1) === '/') {\n            this.baseUri = this.baseUri.slice(0, -1);\n        }\n    }\n    AGiXTSDK.prototype.handleError = function (error) {\n        //console.error(`Error: ${error}`);\n        return \"Error: \".concat(error);\n    };\n    AGiXTSDK.prototype.getProviders = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/provider\"), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.providers];\n                    case 2:\n                        error_1 = _a.sent();\n                        return [2 /*return*/, [this.handleError(error_1)]];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getProvidersByService = function (service) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/providers/service/\").concat(service), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.providers];\n                    case 2:\n                        error_2 = _a.sent();\n                        return [2 /*return*/, [this.handleError(error_2)]];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getAllProviders = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/providers\"), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.providers];\n                    case 2:\n                        error_3 = _a.sent();\n                        return [2 /*return*/, [this.handleError(error_3)]];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getProviderSettings = function (providerName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/provider/\").concat(providerName), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.settings];\n                    case 2:\n                        error_4 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_4)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getEmbedProviders = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_5;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/embedding_providers\"), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.providers];\n                    case 2:\n                        error_5 = _a.sent();\n                        return [2 /*return*/, [this.handleError(error_5)]];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.addAgent = function (agentName_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, settings) {\n            var response, error_6;\n            if (settings === void 0) { settings = {}; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent\"), {\n                                agent_name: agentName,\n                                settings: settings,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data];\n                    case 2:\n                        error_6 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_6)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.importAgent = function (agentName_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, settings, commands) {\n            var response, error_7;\n            if (settings === void 0) { settings = {}; }\n            if (commands === void 0) { commands = {}; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/import\"), {\n                                agent_name: agentName,\n                                settings: settings,\n                                commands: commands,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data];\n                    case 2:\n                        error_7 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_7)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.renameAgent = function (agentName, newName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_8;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.patch(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName), { new_name: newName }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data];\n                    case 2:\n                        error_8 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_8)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.updateAgentSettings = function (agentName, settings) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_9;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.put(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName), {\n                                settings: settings,\n                                agent_name: agentName,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_9 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_9)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.updateAgentCommands = function (agentName, commands) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_10;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.put(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/commands\"), {\n                                commands: commands,\n                                agent_name: agentName,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_10 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_10)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.deleteAgent = function (agentName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_11;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.delete(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_11 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_11)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getAgents = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_12;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/agent\"), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.agents];\n                    case 2:\n                        error_12 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_12)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getAgentConfig = function (agentName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_13;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.agent];\n                    case 2:\n                        error_13 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_13)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getConversations = function (agentName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var url, response, error_14;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        url = agentName ? \"\".concat(this.baseUri, \"/api/\").concat(agentName, \"/conversations\") : \"\".concat(this.baseUri, \"/api/conversations\");\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, axios_1.default.get(url, {\n                                headers: this.headers,\n                            })];\n                    case 2:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.conversations];\n                    case 3:\n                        error_14 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_14)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.addConversationFeedback = function (positive, agentName, message, userInput, feedback, conversationName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_15;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/feedback\"), {\n                                positive: positive,\n                                feedback: feedback,\n                                message: message,\n                                user_input: userInput,\n                                conversation_name: conversationName,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_15 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_15)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getConversation = function () {\n        return __awaiter(this, arguments, void 0, function (conversationName, limit, page, agentName) {\n            var response, error_16;\n            if (conversationName === void 0) { conversationName = ''; }\n            if (limit === void 0) { limit = 100; }\n            if (page === void 0) { page = 1; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.request({\n                                method: 'get',\n                                url: \"\".concat(this.baseUri, \"/api/conversation/\").concat(conversationName),\n                                headers: this.headers,\n                                params: {\n                                    agent_name: agentName,\n                                    limit: limit,\n                                    page: page,\n                                },\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.conversation_history];\n                    case 2:\n                        error_16 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_16)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.renameConversation = function (agentName_1, conversationName_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, conversationName, newName) {\n            var response, error_17;\n            if (newName === void 0) { newName = '-'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.put(\"\".concat(this.baseUri, \"/api/conversation\"), {\n                                conversation_name: conversationName,\n                                new_conversation_name: newName,\n                                agent_name: agentName,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.conversation_name];\n                    case 2:\n                        error_17 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_17)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.forkConversation = function (conversationName, messageId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_18;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/conversation/fork\"), {\n                                conversation_name: conversationName,\n                                message_id: messageId,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_18 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_18)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.newConversation = function (agentName_1, conversationName_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, conversationName, conversationContent) {\n            var response, error_19;\n            if (conversationContent === void 0) { conversationContent = []; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/conversation\"), {\n                                conversation_name: conversationName,\n                                agent_name: agentName,\n                                conversation_content: conversationContent,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.conversation_history];\n                    case 2:\n                        error_19 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_19)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.deleteConversation = function (conversationName, agentName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_20;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.delete(\"\".concat(this.baseUri, \"/api/conversation\"), {\n                                headers: this.headers,\n                                data: {\n                                    conversation_name: conversationName,\n                                    agent_name: agentName,\n                                },\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_20 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_20)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.updateConversationMessage = function (conversationName, messageId, newMessage) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_21;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.put(\"\".concat(this.baseUri, \"/api/conversation/message/\").concat(messageId), {\n                                conversation_name: conversationName,\n                                new_message: newMessage,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_21 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_21)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.deleteConversationMessage = function (conversationName, messageId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_22;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.delete(\"\".concat(this.baseUri, \"/api/conversation/message/\").concat(messageId), {\n                                headers: this.headers,\n                                data: {\n                                    conversation_name: conversationName,\n                                },\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_22 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_22)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.importAgentMemories = function (agentName, memories) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_23;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/memory/import\"), {\n                                memories: memories,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_23 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_23)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.exportAgentMemories = function (agentName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_24;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/memory/export\"), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.memories];\n                    case 2:\n                        error_24 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_24)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.wipeAgentMemories = function (agentName_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, collectionNumber) {\n            var response, error_25;\n            if (collectionNumber === void 0) { collectionNumber = \"0\"; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.delete(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/memory/\").concat(collectionNumber), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_25 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_25)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.promptAgent = function (agentName, promptName, promptArgs) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_26;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/prompt\"), {\n                                prompt_name: promptName,\n                                prompt_args: promptArgs,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.response];\n                    case 2:\n                        error_26 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_26)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.instruct = function (agentName, userInput, conversation) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.promptAgent(agentName, 'instruct', {\n                        user_input: userInput,\n                        disable_memory: true,\n                        conversation_name: conversation,\n                    })];\n            });\n        });\n    };\n    AGiXTSDK.prototype.chat = function (agentName_1, userInput_1, conversation_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, userInput, conversation, contextResults) {\n            if (contextResults === void 0) { contextResults = 4; }\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.promptAgent(agentName, 'Chat', {\n                        user_input: userInput,\n                        context_results: contextResults,\n                        conversation_name: conversation,\n                        disable_memory: true,\n                    })];\n            });\n        });\n    };\n    AGiXTSDK.prototype.smartinstruct = function (agentName, userInput, conversation) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runChain('Smart Instruct', userInput, agentName, false, 1, {\n                        conversation_name: conversation,\n                        disable_memory: true,\n                    })];\n            });\n        });\n    };\n    AGiXTSDK.prototype.smartchat = function (agentName, userInput, conversation) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runChain('Smart Chat', userInput, agentName, false, 1, {\n                        conversation_name: conversation,\n                        disable_memory: true,\n                    })];\n            });\n        });\n    };\n    AGiXTSDK.prototype.getCommands = function (agentName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_27;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/command\"), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.commands];\n                    case 2:\n                        error_27 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_27)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.executeCommand = function (agentName, commandName, commandArgs, conversation) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_28;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/command\"), {\n                                command_name: commandName,\n                                command_args: commandArgs,\n                                conversation_name: conversation,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.response];\n                    case 2:\n                        error_28 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_28)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.toggleCommand = function (agentName, commandName, enable) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_29;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.patch(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/command\"), { command_name: commandName, enable: enable }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_29 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_29)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getChains = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_30;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/chain\"), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data];\n                    case 2:\n                        error_30 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_30)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getChain = function (chainName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_31;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/chain/\").concat(chainName), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.chain];\n                    case 2:\n                        error_31 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_31)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getChainResponses = function (chainName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_32;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/chain/\").concat(chainName, \"/responses\"), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.chain];\n                    case 2:\n                        error_32 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_32)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getChainArgs = function (chainName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_33;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/chain/\").concat(chainName, \"/args\"), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.chain_args];\n                    case 2:\n                        error_33 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_33)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.runChain = function (chainName_1, userInput_1) {\n        return __awaiter(this, arguments, void 0, function (chainName, userInput, agentName, allResponses, fromStep, chainArgs) {\n            var response, error_34;\n            if (agentName === void 0) { agentName = ''; }\n            if (allResponses === void 0) { allResponses = false; }\n            if (fromStep === void 0) { fromStep = 1; }\n            if (chainArgs === void 0) { chainArgs = {}; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/chain/\").concat(chainName, \"/run\"), {\n                                prompt: userInput,\n                                agent_override: agentName,\n                                all_responses: allResponses,\n                                from_step: fromStep,\n                                chain_args: chainArgs,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data];\n                    case 2:\n                        error_34 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_34)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.runChainStep = function (chainName_1, stepNumber_1, userInput_1, agentName_1) {\n        return __awaiter(this, arguments, void 0, function (chainName, stepNumber, userInput, agentName, chainArgs) {\n            var response, error_35;\n            if (chainArgs === void 0) { chainArgs = {}; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/chain/\").concat(chainName, \"/run/step/\").concat(stepNumber), {\n                                prompt: userInput,\n                                agent_override: agentName,\n                                chain_args: chainArgs,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data];\n                    case 2:\n                        error_35 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_35)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.addChain = function (chainName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_36;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/chain\"), { chain_name: chainName }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_36 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_36)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.importChain = function (chainName, steps) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_37;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/chain/import\"), {\n                                chain_name: chainName,\n                                steps: steps,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_37 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_37)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.renameChain = function (chainName, newName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_38;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.put(\"\".concat(this.baseUri, \"/api/chain/\").concat(chainName), { new_name: newName }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_38 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_38)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.deleteChain = function (chainName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_39;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.delete(\"\".concat(this.baseUri, \"/api/chain/\").concat(chainName), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_39 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_39)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.addStep = function (chainName, stepNumber, agentName, promptType, prompt) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_40;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/chain/\").concat(chainName, \"/step\"), {\n                                step_number: stepNumber,\n                                agent_name: agentName,\n                                prompt_type: promptType,\n                                prompt: prompt,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_40 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_40)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.updateStep = function (chainName, stepNumber, agentName, promptType, prompt) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_41;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.put(\"\".concat(this.baseUri, \"/api/chain/\").concat(chainName, \"/step/\").concat(stepNumber), {\n                                step_number: stepNumber,\n                                agent_name: agentName,\n                                prompt_type: promptType,\n                                prompt: prompt,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_41 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_41)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.moveStep = function (chainName, oldStepNumber, newStepNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_42;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.patch(\"\".concat(this.baseUri, \"/api/chain/\").concat(chainName, \"/step/move\"), {\n                                old_step_number: oldStepNumber,\n                                new_step_number: newStepNumber,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_42 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_42)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.deleteStep = function (chainName, stepNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_43;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.delete(\"\".concat(this.baseUri, \"/api/chain/\").concat(chainName, \"/step/\").concat(stepNumber), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_43 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_43)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.addPrompt = function (promptName_1, prompt_1) {\n        return __awaiter(this, arguments, void 0, function (promptName, prompt, promptCategory) {\n            var response, error_44;\n            if (promptCategory === void 0) { promptCategory = 'Default'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/prompt/\").concat(promptCategory), {\n                                prompt_name: promptName,\n                                prompt: prompt,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_44 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_44)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getPrompt = function (promptName_1) {\n        return __awaiter(this, arguments, void 0, function (promptName, promptCategory) {\n            var response, error_45;\n            if (promptCategory === void 0) { promptCategory = 'Default'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/prompt/\").concat(promptCategory, \"/\").concat(promptName), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.prompt];\n                    case 2:\n                        error_45 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_45)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getPrompts = function () {\n        return __awaiter(this, arguments, void 0, function (promptCategory) {\n            var response, error_46;\n            if (promptCategory === void 0) { promptCategory = 'Default'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/prompt/\").concat(promptCategory), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.prompts];\n                    case 2:\n                        error_46 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_46)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.addPromptCategory = function (promptCategory) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_47;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/prompt/\").concat(promptCategory), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, \"Prompt category \".concat(promptCategory, \" created.\")];\n                    case 2:\n                        error_47 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_47)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getPromptCategories = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_48;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/prompt/categories\"), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.prompt_categories];\n                    case 2:\n                        error_48 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_48)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getPromptArgs = function (promptName_1) {\n        return __awaiter(this, arguments, void 0, function (promptName, promptCategory) {\n            var response, error_49;\n            if (promptCategory === void 0) { promptCategory = 'Default'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/prompt/\").concat(promptCategory, \"/\").concat(promptName, \"/args\"), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.prompt_args];\n                    case 2:\n                        error_49 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_49)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.deletePrompt = function (promptName_1) {\n        return __awaiter(this, arguments, void 0, function (promptName, promptCategory) {\n            var response, error_50;\n            if (promptCategory === void 0) { promptCategory = 'Default'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.delete(\"\".concat(this.baseUri, \"/api/prompt/\").concat(promptCategory, \"/\").concat(promptName), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_50 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_50)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.updatePrompt = function (promptName_1, prompt_1) {\n        return __awaiter(this, arguments, void 0, function (promptName, prompt, promptCategory) {\n            var response, error_51;\n            if (promptCategory === void 0) { promptCategory = 'Default'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.put(\"\".concat(this.baseUri, \"/api/prompt/\").concat(promptCategory, \"/\").concat(promptName), {\n                                prompt: prompt,\n                                prompt_name: promptName,\n                                prompt_category: promptCategory,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_51 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_51)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.renamePrompt = function (promptName_1, newName_1) {\n        return __awaiter(this, arguments, void 0, function (promptName, newName, promptCategory) {\n            var response, error_52;\n            if (promptCategory === void 0) { promptCategory = 'Default'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.patch(\"\".concat(this.baseUri, \"/api/prompt/\").concat(promptCategory, \"/\").concat(promptName), { prompt_name: newName }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_52 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_52)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getExtensionSettings = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_53;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/extensions/settings\"), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.extension_settings];\n                    case 2:\n                        error_53 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_53)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getExtensions = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_54;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/extensions\"), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.extensions];\n                    case 2:\n                        error_54 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_54)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getAgentExtensions = function (agentName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_55;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/extensions\"), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.extensions];\n                    case 2:\n                        error_55 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_55)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getCommandArgs = function (commandName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_56;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/extensions/\").concat(commandName, \"/args\"), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.command_args];\n                    case 2:\n                        error_56 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_56)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.learnText = function (agentName_1, userInput_1, text_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, userInput, text, collectionNumber) {\n            var response, error_57;\n            if (collectionNumber === void 0) { collectionNumber = \"0\"; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/learn/text\"), {\n                                user_input: userInput,\n                                text: text,\n                                collection_number: collectionNumber,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_57 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_57)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.learnUrl = function (agentName_1, url_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, url, collectionNumber) {\n            var response, error_58;\n            if (collectionNumber === void 0) { collectionNumber = \"0\"; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/learn/url\"), { url: url, collection_number: collectionNumber }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_58 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_58)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.learnFile = function (agentName_1, fileName_1, fileContent_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, fileName, fileContent, collectionNumber) {\n            var response, error_59;\n            if (collectionNumber === void 0) { collectionNumber = \"0\"; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/learn/file\"), {\n                                file_name: fileName,\n                                file_content: fileContent,\n                                collection_number: collectionNumber,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_59 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_59)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.learnGithubRepo = function (agentName_1, githubRepo_1, githubUser_1, githubToken_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, githubRepo, githubUser, githubToken, githubBranch, useAgentSettings, collectionNumber) {\n            var response, error_60;\n            if (githubBranch === void 0) { githubBranch = 'main'; }\n            if (useAgentSettings === void 0) { useAgentSettings = false; }\n            if (collectionNumber === void 0) { collectionNumber = '0'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/learn/github\"), {\n                                github_repo: githubRepo,\n                                github_user: githubUser,\n                                github_token: githubToken,\n                                github_branch: githubBranch,\n                                use_agent_settings: useAgentSettings,\n                                collection_number: collectionNumber,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_60 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_60)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.learnArxiv = function (agentName_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, query, arxivIds, maxResults, collectionNumber) {\n            var response, error_61;\n            if (query === void 0) { query = ''; }\n            if (arxivIds === void 0) { arxivIds = ''; }\n            if (maxResults === void 0) { maxResults = 5; }\n            if (collectionNumber === void 0) { collectionNumber = '0'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/learn/arxiv\"), {\n                                query: query,\n                                arxiv_ids: arxivIds,\n                                max_results: maxResults,\n                                collection_number: collectionNumber,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_61 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_61)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.agentReader = function (agentName_1, readerName_1, data_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, readerName, data, collectionNumber) {\n            var response, error_62;\n            if (collectionNumber === void 0) { collectionNumber = '0'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!data.collection_number) {\n                            data.collection_number = collectionNumber;\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/reader/\").concat(readerName), { data: data }, { headers: this.headers })];\n                    case 2:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 3:\n                        error_62 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_62)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getAgentMemories = function (agentName_1, userInput_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, userInput, limit, minRelevanceScore, collectionNumber) {\n            var response, error_63;\n            if (limit === void 0) { limit = 5; }\n            if (minRelevanceScore === void 0) { minRelevanceScore = 0.5; }\n            if (collectionNumber === void 0) { collectionNumber = \"0\"; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/memory/\").concat(collectionNumber, \"/query\"), {\n                                user_input: userInput,\n                                limit: limit,\n                                min_relevance_score: minRelevanceScore,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.memories];\n                    case 2:\n                        error_63 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_63)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.deleteAgentMemory = function (agentName_1, memoryId_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, memoryId, collectionNumber) {\n            var response, error_64;\n            if (collectionNumber === void 0) { collectionNumber = \"0\"; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.delete(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/memory/\").concat(collectionNumber, \"/\").concat(memoryId), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_64 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_64)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.createDataset = function (agentName_1, datasetName_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, datasetName, batchSize) {\n            var response, error_65;\n            if (batchSize === void 0) { batchSize = 4; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/memory/dataset\"), {\n                                dataset_name: datasetName,\n                                batch_size: batchSize,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_65 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_65)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.executeCommandWithVoice = function (agentName_1, base64Audio_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, base64Audio, audioFormat, audioVariable, commandName, commandArgs, tts, conversationName) {\n            var response, error_66;\n            if (audioFormat === void 0) { audioFormat = 'm4a'; }\n            if (audioVariable === void 0) { audioVariable = 'data_to_correlate_with_input'; }\n            if (commandName === void 0) { commandName = 'Store information in my long term memory'; }\n            if (commandArgs === void 0) { commandArgs = { input: 'Voice transcription from user' }; }\n            if (tts === void 0) { tts = false; }\n            if (conversationName === void 0) { conversationName = 'AGiXT Terminal'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/command\"), {\n                                command_name: 'Command with Voice',\n                                command_args: {\n                                    base64_audio: base64Audio,\n                                    audio_variable: audioVariable,\n                                    audio_format: audioFormat,\n                                    tts: tts,\n                                    command_name: commandName,\n                                    command_args: commandArgs,\n                                },\n                                conversation_name: conversationName,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.response];\n                    case 2:\n                        error_66 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_66)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getEmbeddersDetails = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_67;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/embedders\"), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.embedders];\n                    case 2:\n                        error_67 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_67)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.positiveFeedback = function (agentName_1, message_1, userInput_1, feedback_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, message, userInput, feedback, conversationName) {\n            if (conversationName === void 0) { conversationName = ''; }\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.provideFeedback(agentName, message, userInput, feedback, true, conversationName)];\n            });\n        });\n    };\n    AGiXTSDK.prototype.negativeFeedback = function (agentName_1, message_1, userInput_1, feedback_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, message, userInput, feedback, conversationName) {\n            if (conversationName === void 0) { conversationName = ''; }\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.provideFeedback(agentName, message, userInput, feedback, false, conversationName)];\n            });\n        });\n    };\n    AGiXTSDK.prototype.provideFeedback = function (agentName, message, userInput, feedback, positive, conversationName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_68;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/feedback\"), {\n                                user_input: userInput,\n                                message: message,\n                                feedback: feedback,\n                                positive: positive,\n                                conversation_name: conversationName,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_68 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_68)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getBrowsedLinks = function (agentName_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, collectionNumber) {\n            var response, error_69;\n            if (collectionNumber === void 0) { collectionNumber = '0'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/browsed_links/\").concat(collectionNumber), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.links];\n                    case 2:\n                        error_69 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_69)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.deleteBrowsedLink = function (agentName_1, link_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, link, collectionNumber) {\n            var response, error_70;\n            if (collectionNumber === void 0) { collectionNumber = '0'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.delete(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/browsed_links\"), {\n                                headers: this.headers,\n                                data: { link: link, collection_number: collectionNumber },\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_70 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_70)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getMemoriesExternalSources = function (agentName, collectionNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_71;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/memory/external_sources/\").concat(collectionNumber), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.external_sources];\n                    case 2:\n                        error_71 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_71)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.deleteMemoryExternalSource = function (agentName, source, collectionNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_72;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.delete(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/memory/external_source\"), {\n                                headers: this.headers,\n                                data: {\n                                    external_source: source,\n                                    collection_number: collectionNumber,\n                                },\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_72 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_72)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getPersona = function (agentName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_73;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/persona\"), { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.persona];\n                    case 2:\n                        error_73 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_73)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.updatePersona = function (agentName, persona) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_74;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.put(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/persona\"), { persona: persona }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_74 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_74)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.promptAgentWithVoice = function (agentName_1, base64Audio_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, base64Audio, audioFormat, audioVariable, promptName, promptArgs, tts, conversationName) {\n            var response, error_75;\n            if (audioFormat === void 0) { audioFormat = 'm4a'; }\n            if (audioVariable === void 0) { audioVariable = 'user_input'; }\n            if (promptName === void 0) { promptName = 'Custom Input'; }\n            if (promptArgs === void 0) { promptArgs = {\n                context_results: 6,\n                inject_memories_from_collection_number: 0,\n            }; }\n            if (tts === void 0) { tts = false; }\n            if (conversationName === void 0) { conversationName = 'AGiXT Terminal'; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/command\"), {\n                                command_name: 'Prompt with Voice',\n                                command_args: {\n                                    base64_audio: base64Audio,\n                                    audio_variable: audioVariable,\n                                    audio_format: audioFormat,\n                                    tts: tts,\n                                    prompt_name: promptName,\n                                    prompt_args: promptArgs,\n                                },\n                                conversation_name: conversationName,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.response];\n                    case 2:\n                        error_75 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_75)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.textToSpeech = function (agentName, text) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_76;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/text_to_speech\"), { text: text }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.url];\n                    case 2:\n                        error_76 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_76)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.newConversationMessage = function (role, message, conversationName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_77;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/conversation/message\"), {\n                                role: role,\n                                message: message,\n                                conversation_name: conversationName,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.message];\n                    case 2:\n                        error_77 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_77)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.getConversationsWithIds = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, error_78;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.get(\"\".concat(this.baseUri, \"/api/conversations\"), {\n                                headers: this.headers,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.conversations_with_ids];\n                    case 2:\n                        error_78 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_78)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AGiXTSDK.prototype.planTask = function (agentName_1, userInput_1) {\n        return __awaiter(this, arguments, void 0, function (agentName, userInput, websearch, websearchDepth, conversationName, logUserInput, logOutput, enableNewCommand) {\n            var response, error_79;\n            if (websearch === void 0) { websearch = false; }\n            if (websearchDepth === void 0) { websearchDepth = 3; }\n            if (conversationName === void 0) { conversationName = ''; }\n            if (logUserInput === void 0) { logUserInput = true; }\n            if (logOutput === void 0) { logOutput = true; }\n            if (enableNewCommand === void 0) { enableNewCommand = true; }\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, axios_1.default.post(\"\".concat(this.baseUri, \"/api/agent/\").concat(agentName, \"/plan/task\"), {\n                                user_input: userInput,\n                                websearch: websearch,\n                                websearch_depth: websearchDepth,\n                                conversation_name: conversationName,\n                                log_user_input: logUserInput,\n                                log_output: logOutput,\n                                enable_new_command: enableNewCommand,\n                            }, { headers: this.headers })];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response.data.response];\n                    case 2:\n                        error_79 = _a.sent();\n                        return [2 /*return*/, this.handleError(error_79)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AGiXTSDK;\n}());\nexports[\"default\"] = AGiXTSDK;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/agixt/dist/index.js\n");

/***/ })

};
;