"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_app_utils_notion_ts"],{

/***/ "(app-pages-browser)/./app/utils/notion.ts":
/*!*****************************!*\
  !*** ./app/utils/notion.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteNoteFromNotion: () => (/* binding */ deleteNoteFromNotion),\n/* harmony export */   findNotionPageId: () => (/* binding */ findNotionPageId),\n/* harmony export */   syncNoteWithNotion: () => (/* binding */ syncNoteWithNotion),\n/* harmony export */   syncNotesFromNotion: () => (/* binding */ syncNotesFromNotion)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nconst deleteNoteFromNotion = async (noteId, param)=>{\n    let { apiKey, clientSecret, refreshToken } = param;\n    // TODO: Replace with actual Notion API implementation\n    if (!apiKey || !clientSecret || !refreshToken) {\n        throw new Error('Notion API key, client secret, or refresh token not configured');\n    }\n    const NOTION_DATABASE_ID = process.env.NEXT_PUBLIC_NOTION_DATABASE_ID;\n    if (!NOTION_DATABASE_ID) {\n        throw new Error('Notion database ID not configured');\n    }\n    try {\n        // First, find the Notion page ID for this note\n        const searchResponse = await fetch(\"https://api.notion.com/v1/databases/\".concat(NOTION_DATABASE_ID, \"/query\"), {\n            method: 'POST',\n            headers: {\n                'Authorization': \"Bearer \".concat(apiKey),\n                'Notion-Version': '2022-06-28',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                filter: {\n                    property: 'note_id',\n                    rich_text: {\n                        equals: noteId\n                    }\n                }\n            })\n        });\n        if (!searchResponse.ok) {\n            throw new Error(\"Failed to find note in Notion: \".concat(searchResponse.statusText));\n        }\n        const searchData = await searchResponse.json();\n        if (searchData.results.length > 0) {\n            const notionPageId = searchData.results[0].id;\n            // Delete the page\n            const deleteResponse = await fetch(\"https://api.notion.com/v1/pages/\".concat(notionPageId), {\n                method: 'DELETE',\n                headers: {\n                    'Authorization': \"Bearer \".concat(apiKey),\n                    'Notion-Version': '2022-06-28'\n                }\n            });\n            if (!deleteResponse.ok) {\n                throw new Error(\"Failed to delete note from Notion: \".concat(deleteResponse.statusText));\n            }\n        }\n    } catch (error) {\n        console.error('Error deleting from Notion:', error);\n        throw error;\n    }\n};\nconst findNotionPageId = async (noteId)=>{\n    var _searchData_results_;\n    const NOTION_API_KEY = process.env.NEXT_PUBLIC_NOTION_API_KEY;\n    const NOTION_DATABASE_ID = process.env.NEXT_PUBLIC_NOTION_DATABASE_ID;\n    if (!NOTION_API_KEY || !NOTION_DATABASE_ID) {\n        throw new Error('Notion API key or database ID not configured');\n    }\n    const searchResponse = await fetch(\"https://api.notion.com/v1/databases/\".concat(NOTION_DATABASE_ID, \"/query\"), {\n        method: 'POST',\n        headers: {\n            'Authorization': \"Bearer \".concat(NOTION_API_KEY),\n            'Notion-Version': '2022-06-28',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            filter: {\n                property: 'note_id',\n                rich_text: {\n                    equals: noteId\n                }\n            }\n        })\n    });\n    if (!searchResponse.ok) {\n        throw new Error(\"Failed to find note in Notion: \".concat(searchResponse.statusText));\n    }\n    const searchData = await searchResponse.json();\n    return (_searchData_results_ = searchData.results[0]) === null || _searchData_results_ === void 0 ? void 0 : _searchData_results_.id;\n};\nconst syncNotesFromNotion = async (param)=>{\n    let { apiKey, clientSecret, refreshToken } = param;\n    if (!apiKey || !clientSecret || !refreshToken) {\n        throw new Error('Notion API key, client secret, or refresh token not configured');\n    }\n    const NOTION_DATABASE_ID = process.env.NEXT_PUBLIC_NOTION_DATABASE_ID;\n    if (!NOTION_DATABASE_ID) {\n        throw new Error('Notion database ID not configured');\n    }\n    const response = await fetch(\"https://api.notion.com/v1/databases/\".concat(NOTION_DATABASE_ID, \"/query\"), {\n        method: 'POST',\n        headers: {\n            'Authorization': \"Bearer \".concat(apiKey),\n            'Notion-Version': '2022-06-28',\n            'Content-Type': 'application/json'\n        }\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch notes from Notion: \".concat(response.statusText));\n    }\n    const data = await response.json();\n    return data.results.map((page)=>{\n        var _page_properties_note_id_rich_text_, _page_properties_title_title_;\n        return {\n            id: ((_page_properties_note_id_rich_text_ = page.properties.note_id.rich_text[0]) === null || _page_properties_note_id_rich_text_ === void 0 ? void 0 : _page_properties_note_id_rich_text_.plain_text) || crypto.randomUUID(),\n            title: ((_page_properties_title_title_ = page.properties.title.title[0]) === null || _page_properties_title_title_ === void 0 ? void 0 : _page_properties_title_title_.plain_text) || 'Untitled Note',\n            content: page.properties.content.rich_text.map((text)=>text.plain_text).join('\\n') || '',\n            tags: page.properties.tags.multi_select.map((tag)=>tag.name) || [],\n            createdAt: new Date(page.created_time),\n            updatedAt: new Date(page.last_edited_time)\n        };\n    });\n};\nconst syncNoteWithNotion = async (note, param)=>{\n    let { apiKey, clientSecret, refreshToken } = param;\n    // TODO: Replace with actual Notion API implementation\n    if (!apiKey || !clientSecret || !refreshToken) {\n        throw new Error('Notion API key, client secret, or refresh token not configured');\n    }\n    const NOTION_DATABASE_ID = process.env.NEXT_PUBLIC_NOTION_DATABASE_ID;\n    if (!NOTION_DATABASE_ID) {\n        throw new Error('Notion database ID not configured');\n    }\n    try {\n        // Check if note already exists in Notion\n        const existingPageId = await findNotionPageId(note.id);\n        const endpoint = existingPageId ? \"https://api.notion.com/v1/pages/\".concat(existingPageId) : \"https://api.notion.com/v1/pages\";\n        const response = await fetch(endpoint, {\n            method: existingPageId ? 'PATCH' : 'POST',\n            headers: {\n                'Authorization': \"Bearer \".concat(apiKey),\n                'Notion-Version': '2022-06-28',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                parent: {\n                    database_id: NOTION_DATABASE_ID\n                },\n                properties: {\n                    note_id: {\n                        rich_text: [\n                            {\n                                text: {\n                                    content: note.id\n                                }\n                            }\n                        ]\n                    },\n                    title: {\n                        title: [\n                            {\n                                text: {\n                                    content: note.title\n                                }\n                            }\n                        ]\n                    },\n                    content: {\n                        rich_text: note.content.split('\\n').map((line)=>({\n                                text: {\n                                    content: line\n                                }\n                            }))\n                    },\n                    tags: {\n                        multi_select: note.tags.map((tag)=>({\n                                name: tag\n                            }))\n                    }\n                }\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to sync with Notion: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Error syncing with Notion:', error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/utils/notion.ts\n"));

/***/ })

}]);